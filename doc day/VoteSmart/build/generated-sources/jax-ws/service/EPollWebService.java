
package service;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.1-hudson-28-
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EPollWebService", targetNamespace = "http://service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EPollWebService {


    /**
     * 
     * @param zoneId
     * @return
     *     returns service.ZoneMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getZone", targetNamespace = "http://service/", className = "service.GetZone")
    @ResponseWrapper(localName = "getZoneResponse", targetNamespace = "http://service/", className = "service.GetZoneResponse")
    @Action(input = "http://service/EPollWebService/getZoneRequest", output = "http://service/EPollWebService/getZoneResponse")
    public ZoneMaster getZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param securityId
     * @return
     *     returns service.SecurityMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSecurity", targetNamespace = "http://service/", className = "service.GetSecurity")
    @ResponseWrapper(localName = "getSecurityResponse", targetNamespace = "http://service/", className = "service.GetSecurityResponse")
    @Action(input = "http://service/EPollWebService/getSecurityRequest", output = "http://service/EPollWebService/getSecurityResponse")
    public SecurityMaster getSecurity(
        @WebParam(name = "securityId", targetNamespace = "")
        Integer securityId);

    /**
     * 
     * @param candidateId
     * @param electionId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForCandidate", targetNamespace = "http://service/", className = "service.GetVoteCountForCandidate")
    @ResponseWrapper(localName = "getVoteCountForCandidateResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForCandidateResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForCandidateRequest", output = "http://service/EPollWebService/getVoteCountForCandidateResponse")
    public Long getVoteCountForCandidate(
        @WebParam(name = "candidateId", targetNamespace = "")
        Integer candidateId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param electionId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountsForElection", targetNamespace = "http://service/", className = "service.GetVoteCountsForElection")
    @ResponseWrapper(localName = "getVoteCountsForElectionResponse", targetNamespace = "http://service/", className = "service.GetVoteCountsForElectionResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountsForElectionRequest", output = "http://service/EPollWebService/getVoteCountsForElectionResponse")
    public Long getVoteCountsForElection(
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param wardId
     * @param electionId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForWard", targetNamespace = "http://service/", className = "service.GetVoteCountForWard")
    @ResponseWrapper(localName = "getVoteCountForWardResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForWardResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForWardRequest", output = "http://service/EPollWebService/getVoteCountForWardResponse")
    public Long getVoteCountForWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param electionId
     * @param subwardId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForSubward", targetNamespace = "http://service/", className = "service.GetVoteCountForSubward")
    @ResponseWrapper(localName = "getVoteCountForSubwardResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForSubwardResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForSubwardRequest", output = "http://service/EPollWebService/getVoteCountForSubwardResponse")
    public Long getVoteCountForSubward(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param electionId
     * @param areaId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForArea", targetNamespace = "http://service/", className = "service.GetVoteCountForArea")
    @ResponseWrapper(localName = "getVoteCountForAreaResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForAreaResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForAreaRequest", output = "http://service/EPollWebService/getVoteCountForAreaResponse")
    public Long getVoteCountForArea(
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param partyId
     * @param electionId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForParty", targetNamespace = "http://service/", className = "service.GetVoteCountForParty")
    @ResponseWrapper(localName = "getVoteCountForPartyResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForPartyResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForPartyRequest", output = "http://service/EPollWebService/getVoteCountForPartyResponse")
    public Long getVoteCountForParty(
        @WebParam(name = "partyId", targetNamespace = "")
        Integer partyId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param electionId
     * @param zoneId
     * @return
     *     returns java.lang.Long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVoteCountForZone", targetNamespace = "http://service/", className = "service.GetVoteCountForZone")
    @ResponseWrapper(localName = "getVoteCountForZoneResponse", targetNamespace = "http://service/", className = "service.GetVoteCountForZoneResponse")
    @Action(input = "http://service/EPollWebService/getVoteCountForZoneRequest", output = "http://service/EPollWebService/getVoteCountForZoneResponse")
    public Long getVoteCountForZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId,
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param electionId
     * @return
     *     returns service.XmlHashMapIL
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidateWiseVoteCountsForElection", targetNamespace = "http://service/", className = "service.GetCandidateWiseVoteCountsForElection")
    @ResponseWrapper(localName = "getCandidateWiseVoteCountsForElectionResponse", targetNamespace = "http://service/", className = "service.GetCandidateWiseVoteCountsForElectionResponse")
    @Action(input = "http://service/EPollWebService/getCandidateWiseVoteCountsForElectionRequest", output = "http://service/EPollWebService/getCandidateWiseVoteCountsForElectionResponse")
    public XmlHashMapIL getCandidateWiseVoteCountsForElection(
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @param wardId
     * @param electionId
     * @return
     *     returns service.XmlHashMapIL
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidateWiseVoteCountsForWard", targetNamespace = "http://service/", className = "service.GetCandidateWiseVoteCountsForWard")
    @ResponseWrapper(localName = "getCandidateWiseVoteCountsForWardResponse", targetNamespace = "http://service/", className = "service.GetCandidateWiseVoteCountsForWardResponse")
    @Action(input = "http://service/EPollWebService/getCandidateWiseVoteCountsForWardRequest", output = "http://service/EPollWebService/getCandidateWiseVoteCountsForWardResponse")
    public XmlHashMapIL getCandidateWiseVoteCountsForWard(
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param electionId
     * @param zoneId
     * @return
     *     returns service.XmlHashMapIL
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWardWiseVoteCountsForZone", targetNamespace = "http://service/", className = "service.GetWardWiseVoteCountsForZone")
    @ResponseWrapper(localName = "getWardWiseVoteCountsForZoneResponse", targetNamespace = "http://service/", className = "service.GetWardWiseVoteCountsForZoneResponse")
    @Action(input = "http://service/EPollWebService/getWardWiseVoteCountsForZoneRequest", output = "http://service/EPollWebService/getWardWiseVoteCountsForZoneResponse")
    public XmlHashMapIL getWardWiseVoteCountsForZone(
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param maxResults
     * @param zoneName
     * @return
     *     returns java.util.List<service.ZoneMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchByZoneName", targetNamespace = "http://service/", className = "service.SearchByZoneName")
    @ResponseWrapper(localName = "searchByZoneNameResponse", targetNamespace = "http://service/", className = "service.SearchByZoneNameResponse")
    @Action(input = "http://service/EPollWebService/searchByZoneNameRequest", output = "http://service/EPollWebService/searchByZoneNameResponse")
    public List<ZoneMaster> searchByZoneName(
        @WebParam(name = "zoneName", targetNamespace = "")
        String zoneName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param wardName
     * @param maxResults
     * @return
     *     returns java.util.List<service.WardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchWardByName", targetNamespace = "http://service/", className = "service.SearchWardByName")
    @ResponseWrapper(localName = "searchWardByNameResponse", targetNamespace = "http://service/", className = "service.SearchWardByNameResponse")
    @Action(input = "http://service/EPollWebService/searchWardByNameRequest", output = "http://service/EPollWebService/searchWardByNameResponse")
    public List<WardMaster> searchWardByName(
        @WebParam(name = "wardName", targetNamespace = "")
        String wardName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param subwardName
     * @param maxResults
     * @return
     *     returns java.util.List<service.SubWardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchBySubWardName", targetNamespace = "http://service/", className = "service.SearchBySubWardName")
    @ResponseWrapper(localName = "searchBySubWardNameResponse", targetNamespace = "http://service/", className = "service.SearchBySubWardNameResponse")
    @Action(input = "http://service/EPollWebService/searchBySubWardNameRequest", output = "http://service/EPollWebService/searchBySubWardNameResponse")
    public List<SubWardMaster> searchBySubWardName(
        @WebParam(name = "subwardName", targetNamespace = "")
        String subwardName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param areaName
     * @param maxResults
     * @return
     *     returns java.util.List<service.AreaMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchByAreaName", targetNamespace = "http://service/", className = "service.SearchByAreaName")
    @ResponseWrapper(localName = "searchByAreaNameResponse", targetNamespace = "http://service/", className = "service.SearchByAreaNameResponse")
    @Action(input = "http://service/EPollWebService/searchByAreaNameRequest", output = "http://service/EPollWebService/searchByAreaNameResponse")
    public List<AreaMaster> searchByAreaName(
        @WebParam(name = "areaName", targetNamespace = "")
        String areaName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param firstName
     * @param maxResults
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCandidateByFirstName", targetNamespace = "http://service/", className = "service.SearchCandidateByFirstName")
    @ResponseWrapper(localName = "searchCandidateByFirstNameResponse", targetNamespace = "http://service/", className = "service.SearchCandidateByFirstNameResponse")
    @Action(input = "http://service/EPollWebService/searchCandidateByFirstNameRequest", output = "http://service/EPollWebService/searchCandidateByFirstNameResponse")
    public List<CandidateMaster> searchCandidateByFirstName(
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param lastName
     * @param maxResults
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCandidateByLastName", targetNamespace = "http://service/", className = "service.SearchCandidateByLastName")
    @ResponseWrapper(localName = "searchCandidateByLastNameResponse", targetNamespace = "http://service/", className = "service.SearchCandidateByLastNameResponse")
    @Action(input = "http://service/EPollWebService/searchCandidateByLastNameRequest", output = "http://service/EPollWebService/searchCandidateByLastNameResponse")
    public List<CandidateMaster> searchCandidateByLastName(
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param fromDate
     * @param toDate
     * @param maxResults
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCandidateByDateOfBirthRange", targetNamespace = "http://service/", className = "service.SearchCandidateByDateOfBirthRange")
    @ResponseWrapper(localName = "searchCandidateByDateOfBirthRangeResponse", targetNamespace = "http://service/", className = "service.SearchCandidateByDateOfBirthRangeResponse")
    @Action(input = "http://service/EPollWebService/searchCandidateByDateOfBirthRangeRequest", output = "http://service/EPollWebService/searchCandidateByDateOfBirthRangeResponse")
    public List<CandidateMaster> searchCandidateByDateOfBirthRange(
        @WebParam(name = "fromDate", targetNamespace = "")
        XMLGregorianCalendar fromDate,
        @WebParam(name = "toDate", targetNamespace = "")
        XMLGregorianCalendar toDate,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param isActive
     * @param maxResults
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCandidateByActiveStatus", targetNamespace = "http://service/", className = "service.SearchCandidateByActiveStatus")
    @ResponseWrapper(localName = "searchCandidateByActiveStatusResponse", targetNamespace = "http://service/", className = "service.SearchCandidateByActiveStatusResponse")
    @Action(input = "http://service/EPollWebService/searchCandidateByActiveStatusRequest", output = "http://service/EPollWebService/searchCandidateByActiveStatusResponse")
    public List<CandidateMaster> searchCandidateByActiveStatus(
        @WebParam(name = "isActive", targetNamespace = "")
        boolean isActive,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param citizenId
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCitizenById", targetNamespace = "http://service/", className = "service.SearchCitizenById")
    @ResponseWrapper(localName = "searchCitizenByIdResponse", targetNamespace = "http://service/", className = "service.SearchCitizenByIdResponse")
    @Action(input = "http://service/EPollWebService/searchCitizenByIdRequest", output = "http://service/EPollWebService/searchCitizenByIdResponse")
    public List<CitizenMaster> searchCitizenById(
        @WebParam(name = "citizenId", targetNamespace = "")
        Integer citizenId);

    /**
     * 
     * @param username
     * @param maxResults
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCitizenByUsername", targetNamespace = "http://service/", className = "service.SearchCitizenByUsername")
    @ResponseWrapper(localName = "searchCitizenByUsernameResponse", targetNamespace = "http://service/", className = "service.SearchCitizenByUsernameResponse")
    @Action(input = "http://service/EPollWebService/searchCitizenByUsernameRequest", output = "http://service/EPollWebService/searchCitizenByUsernameResponse")
    public List<CitizenMaster> searchCitizenByUsername(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param electionName
     * @param maxResults
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchElectionByName", targetNamespace = "http://service/", className = "service.SearchElectionByName")
    @ResponseWrapper(localName = "searchElectionByNameResponse", targetNamespace = "http://service/", className = "service.SearchElectionByNameResponse")
    @Action(input = "http://service/EPollWebService/searchElectionByNameRequest", output = "http://service/EPollWebService/searchElectionByNameResponse")
    public List<ElectionMaster> searchElectionByName(
        @WebParam(name = "electionName", targetNamespace = "")
        String electionName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param date
     * @param maxResults
     * @return
     *     returns service.ElectionMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchElectionByFinalDate", targetNamespace = "http://service/", className = "service.SearchElectionByFinalDate")
    @ResponseWrapper(localName = "searchElectionByFinalDateResponse", targetNamespace = "http://service/", className = "service.SearchElectionByFinalDateResponse")
    @Action(input = "http://service/EPollWebService/searchElectionByFinalDateRequest", output = "http://service/EPollWebService/searchElectionByFinalDateResponse")
    public ElectionMaster searchElectionByFinalDate(
        @WebParam(name = "date", targetNamespace = "")
        XMLGregorianCalendar date,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param fromDate
     * @param toDate
     * @param maxResults
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchElectionByDateRange", targetNamespace = "http://service/", className = "service.SearchElectionByDateRange")
    @ResponseWrapper(localName = "searchElectionByDateRangeResponse", targetNamespace = "http://service/", className = "service.SearchElectionByDateRangeResponse")
    @Action(input = "http://service/EPollWebService/searchElectionByDateRangeRequest", output = "http://service/EPollWebService/searchElectionByDateRangeResponse")
    public List<ElectionMaster> searchElectionByDateRange(
        @WebParam(name = "fromDate", targetNamespace = "")
        XMLGregorianCalendar fromDate,
        @WebParam(name = "toDate", targetNamespace = "")
        XMLGregorianCalendar toDate,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param electionTypeId
     * @param maxResults
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchElectionByElectionType", targetNamespace = "http://service/", className = "service.SearchElectionByElectionType")
    @ResponseWrapper(localName = "searchElectionByElectionTypeResponse", targetNamespace = "http://service/", className = "service.SearchElectionByElectionTypeResponse")
    @Action(input = "http://service/EPollWebService/searchElectionByElectionTypeRequest", output = "http://service/EPollWebService/searchElectionByElectionTypeResponse")
    public List<ElectionMaster> searchElectionByElectionType(
        @WebParam(name = "electionTypeId", targetNamespace = "")
        Integer electionTypeId,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param partyName
     * @param maxResults
     * @return
     *     returns java.util.List<service.PartyMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchPartyByPartyName", targetNamespace = "http://service/", className = "service.SearchPartyByPartyName")
    @ResponseWrapper(localName = "searchPartyByPartyNameResponse", targetNamespace = "http://service/", className = "service.SearchPartyByPartyNameResponse")
    @Action(input = "http://service/EPollWebService/searchPartyByPartyNameRequest", output = "http://service/EPollWebService/searchPartyByPartyNameResponse")
    public List<PartyMaster> searchPartyByPartyName(
        @WebParam(name = "partyName", targetNamespace = "")
        String partyName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param citizenName
     * @param maxResults
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchCitizenByName", targetNamespace = "http://service/", className = "service.SearchCitizenByName")
    @ResponseWrapper(localName = "searchCitizenByNameResponse", targetNamespace = "http://service/", className = "service.SearchCitizenByNameResponse")
    @Action(input = "http://service/EPollWebService/searchCitizenByNameRequest", output = "http://service/EPollWebService/searchCitizenByNameResponse")
    public List<CitizenMaster> searchCitizenByName(
        @WebParam(name = "citizenName", targetNamespace = "")
        String citizenName,
        @WebParam(name = "maxResults", targetNamespace = "")
        Integer maxResults);

    /**
     * 
     * @param cm
     * @param partyId
     * @param wardId
     * @param areaId
     * @param subwardId
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addCandidate", targetNamespace = "http://service/", className = "service.AddCandidate")
    @ResponseWrapper(localName = "addCandidateResponse", targetNamespace = "http://service/", className = "service.AddCandidateResponse")
    @Action(input = "http://service/EPollWebService/addCandidateRequest", output = "http://service/EPollWebService/addCandidateResponse")
    public boolean addCandidate(
        @WebParam(name = "cm", targetNamespace = "")
        CandidateMaster cm,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId,
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId,
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId,
        @WebParam(name = "partyId", targetNamespace = "")
        Integer partyId);

    /**
     * 
     * @param cm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkForExistingCandidate", targetNamespace = "http://service/", className = "service.CheckForExistingCandidate")
    @ResponseWrapper(localName = "checkForExistingCandidateResponse", targetNamespace = "http://service/", className = "service.CheckForExistingCandidateResponse")
    @Action(input = "http://service/EPollWebService/checkForExistingCandidateRequest", output = "http://service/EPollWebService/checkForExistingCandidateResponse")
    public boolean checkForExistingCandidate(
        @WebParam(name = "cm", targetNamespace = "")
        CandidateMaster cm);

    /**
     * 
     * @param cm
     * @param partyId
     * @param wardId
     * @param areaId
     * @param subwardId
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateCandidate", targetNamespace = "http://service/", className = "service.UpdateCandidate")
    @ResponseWrapper(localName = "updateCandidateResponse", targetNamespace = "http://service/", className = "service.UpdateCandidateResponse")
    @Action(input = "http://service/EPollWebService/updateCandidateRequest", output = "http://service/EPollWebService/updateCandidateResponse")
    public boolean updateCandidate(
        @WebParam(name = "cm", targetNamespace = "")
        CandidateMaster cm,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId,
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId,
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId,
        @WebParam(name = "partyId", targetNamespace = "")
        Integer partyId);

    /**
     * 
     * @param candidateID
     * @return
     *     returns service.CandidateMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidate", targetNamespace = "http://service/", className = "service.GetCandidate")
    @ResponseWrapper(localName = "getCandidateResponse", targetNamespace = "http://service/", className = "service.GetCandidateResponse")
    @Action(input = "http://service/EPollWebService/getCandidateRequest", output = "http://service/EPollWebService/getCandidateResponse")
    public CandidateMaster getCandidate(
        @WebParam(name = "candidateID", targetNamespace = "")
        Integer candidateID);

    /**
     * 
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCandidates", targetNamespace = "http://service/", className = "service.GetAllCandidates")
    @ResponseWrapper(localName = "getAllCandidatesResponse", targetNamespace = "http://service/", className = "service.GetAllCandidatesResponse")
    @Action(input = "http://service/EPollWebService/getAllCandidatesRequest", output = "http://service/EPollWebService/getAllCandidatesResponse")
    public List<CandidateMaster> getAllCandidates();

    /**
     * 
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllActiveCandidates", targetNamespace = "http://service/", className = "service.GetAllActiveCandidates")
    @ResponseWrapper(localName = "getAllActiveCandidatesResponse", targetNamespace = "http://service/", className = "service.GetAllActiveCandidatesResponse")
    @Action(input = "http://service/EPollWebService/getAllActiveCandidatesRequest", output = "http://service/EPollWebService/getAllActiveCandidatesResponse")
    public List<CandidateMaster> getAllActiveCandidates();

    /**
     * 
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllInActiveCandidates", targetNamespace = "http://service/", className = "service.GetAllInActiveCandidates")
    @ResponseWrapper(localName = "getAllInActiveCandidatesResponse", targetNamespace = "http://service/", className = "service.GetAllInActiveCandidatesResponse")
    @Action(input = "http://service/EPollWebService/getAllInActiveCandidatesRequest", output = "http://service/EPollWebService/getAllInActiveCandidatesResponse")
    public List<CandidateMaster> getAllInActiveCandidates();

    /**
     * 
     * @param candidateId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteCandidate", targetNamespace = "http://service/", className = "service.DeleteCandidate")
    @ResponseWrapper(localName = "deleteCandidateResponse", targetNamespace = "http://service/", className = "service.DeleteCandidateResponse")
    @Action(input = "http://service/EPollWebService/deleteCandidateRequest", output = "http://service/EPollWebService/deleteCandidateResponse")
    public boolean deleteCandidate(
        @WebParam(name = "candidateId", targetNamespace = "")
        Integer candidateId);

    /**
     * 
     * @param lm
     * @param cm
     * @param wardId
     * @param areaId
     * @param subwardId
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addCitizen", targetNamespace = "http://service/", className = "service.AddCitizen")
    @ResponseWrapper(localName = "addCitizenResponse", targetNamespace = "http://service/", className = "service.AddCitizenResponse")
    @Action(input = "http://service/EPollWebService/addCitizenRequest", output = "http://service/EPollWebService/addCitizenResponse")
    public boolean addCitizen(
        @WebParam(name = "lm", targetNamespace = "")
        LoginMaster lm,
        @WebParam(name = "cm", targetNamespace = "")
        CitizenMaster cm,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId,
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId,
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @param lm
     * @param cm
     * @param wardId
     * @param areaId
     * @param subwardId
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateCitizen", targetNamespace = "http://service/", className = "service.UpdateCitizen")
    @ResponseWrapper(localName = "updateCitizenResponse", targetNamespace = "http://service/", className = "service.UpdateCitizenResponse")
    @Action(input = "http://service/EPollWebService/updateCitizenRequest", output = "http://service/EPollWebService/updateCitizenResponse")
    public boolean updateCitizen(
        @WebParam(name = "lm", targetNamespace = "")
        LoginMaster lm,
        @WebParam(name = "cm", targetNamespace = "")
        CitizenMaster cm,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId,
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId,
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @param citizenId
     * @return
     *     returns service.CitizenMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCitizenMaster", targetNamespace = "http://service/", className = "service.GetCitizenMaster")
    @ResponseWrapper(localName = "getCitizenMasterResponse", targetNamespace = "http://service/", className = "service.GetCitizenMasterResponse")
    @Action(input = "http://service/EPollWebService/getCitizenMasterRequest", output = "http://service/EPollWebService/getCitizenMasterResponse")
    public CitizenMaster getCitizenMaster(
        @WebParam(name = "citizenId", targetNamespace = "")
        Integer citizenId);

    /**
     * 
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCitizens", targetNamespace = "http://service/", className = "service.GetAllCitizens")
    @ResponseWrapper(localName = "getAllCitizensResponse", targetNamespace = "http://service/", className = "service.GetAllCitizensResponse")
    @Action(input = "http://service/EPollWebService/getAllCitizensRequest", output = "http://service/EPollWebService/getAllCitizensResponse")
    public List<CitizenMaster> getAllCitizens();

    /**
     * 
     * @param userId
     * @return
     *     returns service.LoginMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLoginMaster", targetNamespace = "http://service/", className = "service.GetLoginMaster")
    @ResponseWrapper(localName = "getLoginMasterResponse", targetNamespace = "http://service/", className = "service.GetLoginMasterResponse")
    @Action(input = "http://service/EPollWebService/getLoginMasterRequest", output = "http://service/EPollWebService/getLoginMasterResponse")
    public LoginMaster getLoginMaster(
        @WebParam(name = "userId", targetNamespace = "")
        Integer userId);

    /**
     * 
     * @param citizenId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteCitizen", targetNamespace = "http://service/", className = "service.DeleteCitizen")
    @ResponseWrapper(localName = "deleteCitizenResponse", targetNamespace = "http://service/", className = "service.DeleteCitizenResponse")
    @Action(input = "http://service/EPollWebService/deleteCitizenRequest", output = "http://service/EPollWebService/deleteCitizenResponse")
    public boolean deleteCitizen(
        @WebParam(name = "citizenId", targetNamespace = "")
        Integer citizenId);

    /**
     * 
     * @param cityMasterId
     * @param zone
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addZone", targetNamespace = "http://service/", className = "service.AddZone")
    @ResponseWrapper(localName = "addZoneResponse", targetNamespace = "http://service/", className = "service.AddZoneResponse")
    @Action(input = "http://service/EPollWebService/addZoneRequest", output = "http://service/EPollWebService/addZoneResponse")
    public boolean addZone(
        @WebParam(name = "zone", targetNamespace = "")
        ZoneMaster zone,
        @WebParam(name = "cityMasterId", targetNamespace = "")
        Integer cityMasterId);

    /**
     * 
     * @param newCityMasterId
     * @param zone
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateZone", targetNamespace = "http://service/", className = "service.UpdateZone")
    @ResponseWrapper(localName = "updateZoneResponse", targetNamespace = "http://service/", className = "service.UpdateZoneResponse")
    @Action(input = "http://service/EPollWebService/updateZoneRequest", output = "http://service/EPollWebService/updateZoneResponse")
    public boolean updateZone(
        @WebParam(name = "zone", targetNamespace = "")
        ZoneMaster zone,
        @WebParam(name = "newCityMasterId", targetNamespace = "")
        Integer newCityMasterId);

    /**
     * 
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteZone", targetNamespace = "http://service/", className = "service.DeleteZone")
    @ResponseWrapper(localName = "deleteZoneResponse", targetNamespace = "http://service/", className = "service.DeleteZoneResponse")
    @Action(input = "http://service/EPollWebService/deleteZoneRequest", output = "http://service/EPollWebService/deleteZoneResponse")
    public boolean deleteZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @return
     *     returns java.util.List<service.ZoneMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllZones", targetNamespace = "http://service/", className = "service.GetAllZones")
    @ResponseWrapper(localName = "getAllZonesResponse", targetNamespace = "http://service/", className = "service.GetAllZonesResponse")
    @Action(input = "http://service/EPollWebService/getAllZonesRequest", output = "http://service/EPollWebService/getAllZonesResponse")
    public List<ZoneMaster> getAllZones();

    /**
     * 
     * @param zoneId
     * @return
     *     returns java.util.List<service.WardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWardsOfZone", targetNamespace = "http://service/", className = "service.GetWardsOfZone")
    @ResponseWrapper(localName = "getWardsOfZoneResponse", targetNamespace = "http://service/", className = "service.GetWardsOfZoneResponse")
    @Action(input = "http://service/EPollWebService/getWardsOfZoneRequest", output = "http://service/EPollWebService/getWardsOfZoneResponse")
    public List<WardMaster> getWardsOfZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param zoneId
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCitizensOfZone", targetNamespace = "http://service/", className = "service.GetCitizensOfZone")
    @ResponseWrapper(localName = "getCitizensOfZoneResponse", targetNamespace = "http://service/", className = "service.GetCitizensOfZoneResponse")
    @Action(input = "http://service/EPollWebService/getCitizensOfZoneRequest", output = "http://service/EPollWebService/getCitizensOfZoneResponse")
    public List<CitizenMaster> getCitizensOfZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param zoneId
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidatesOfZone", targetNamespace = "http://service/", className = "service.GetCandidatesOfZone")
    @ResponseWrapper(localName = "getCandidatesOfZoneResponse", targetNamespace = "http://service/", className = "service.GetCandidatesOfZoneResponse")
    @Action(input = "http://service/EPollWebService/getCandidatesOfZoneRequest", output = "http://service/EPollWebService/getCandidatesOfZoneResponse")
    public List<CandidateMaster> getCandidatesOfZone(
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param ward
     * @param zoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addWard", targetNamespace = "http://service/", className = "service.AddWard")
    @ResponseWrapper(localName = "addWardResponse", targetNamespace = "http://service/", className = "service.AddWardResponse")
    @Action(input = "http://service/EPollWebService/addWardRequest", output = "http://service/EPollWebService/addWardResponse")
    public boolean addWard(
        @WebParam(name = "ward", targetNamespace = "")
        WardMaster ward,
        @WebParam(name = "zoneId", targetNamespace = "")
        Integer zoneId);

    /**
     * 
     * @param ward
     * @param newZoneId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateWard", targetNamespace = "http://service/", className = "service.UpdateWard")
    @ResponseWrapper(localName = "updateWardResponse", targetNamespace = "http://service/", className = "service.UpdateWardResponse")
    @Action(input = "http://service/EPollWebService/updateWardRequest", output = "http://service/EPollWebService/updateWardResponse")
    public boolean updateWard(
        @WebParam(name = "ward", targetNamespace = "")
        WardMaster ward,
        @WebParam(name = "newZoneId", targetNamespace = "")
        Integer newZoneId);

    /**
     * 
     * @param wardId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteWard", targetNamespace = "http://service/", className = "service.DeleteWard")
    @ResponseWrapper(localName = "deleteWardResponse", targetNamespace = "http://service/", className = "service.DeleteWardResponse")
    @Action(input = "http://service/EPollWebService/deleteWardRequest", output = "http://service/EPollWebService/deleteWardResponse")
    public boolean deleteWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @return
     *     returns java.util.List<service.WardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllWards", targetNamespace = "http://service/", className = "service.GetAllWards")
    @ResponseWrapper(localName = "getAllWardsResponse", targetNamespace = "http://service/", className = "service.GetAllWardsResponse")
    @Action(input = "http://service/EPollWebService/getAllWardsRequest", output = "http://service/EPollWebService/getAllWardsResponse")
    public List<WardMaster> getAllWards();

    /**
     * 
     * @param wardId
     * @return
     *     returns service.WardMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWard", targetNamespace = "http://service/", className = "service.GetWard")
    @ResponseWrapper(localName = "getWardResponse", targetNamespace = "http://service/", className = "service.GetWardResponse")
    @Action(input = "http://service/EPollWebService/getWardRequest", output = "http://service/EPollWebService/getWardResponse")
    public WardMaster getWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param wardId
     * @return
     *     returns java.util.List<service.SubWardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubWardsOfWard", targetNamespace = "http://service/", className = "service.GetSubWardsOfWard")
    @ResponseWrapper(localName = "getSubWardsOfWardResponse", targetNamespace = "http://service/", className = "service.GetSubWardsOfWardResponse")
    @Action(input = "http://service/EPollWebService/getSubWardsOfWardRequest", output = "http://service/EPollWebService/getSubWardsOfWardResponse")
    public List<SubWardMaster> getSubWardsOfWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param wardId
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCitizensOfWard", targetNamespace = "http://service/", className = "service.GetCitizensOfWard")
    @ResponseWrapper(localName = "getCitizensOfWardResponse", targetNamespace = "http://service/", className = "service.GetCitizensOfWardResponse")
    @Action(input = "http://service/EPollWebService/getCitizensOfWardRequest", output = "http://service/EPollWebService/getCitizensOfWardResponse")
    public List<CitizenMaster> getCitizensOfWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param wardId
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidatesOfWard", targetNamespace = "http://service/", className = "service.GetCandidatesOfWard")
    @ResponseWrapper(localName = "getCandidatesOfWardResponse", targetNamespace = "http://service/", className = "service.GetCandidatesOfWardResponse")
    @Action(input = "http://service/EPollWebService/getCandidatesOfWardRequest", output = "http://service/EPollWebService/getCandidatesOfWardResponse")
    public List<CandidateMaster> getCandidatesOfWard(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param wardId
     * @param subward
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addSubWard", targetNamespace = "http://service/", className = "service.AddSubWard")
    @ResponseWrapper(localName = "addSubWardResponse", targetNamespace = "http://service/", className = "service.AddSubWardResponse")
    @Action(input = "http://service/EPollWebService/addSubWardRequest", output = "http://service/EPollWebService/addSubWardResponse")
    public boolean addSubWard(
        @WebParam(name = "subward", targetNamespace = "")
        SubWardMaster subward,
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param subward
     * @param newWardId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateSubWard", targetNamespace = "http://service/", className = "service.UpdateSubWard")
    @ResponseWrapper(localName = "updateSubWardResponse", targetNamespace = "http://service/", className = "service.UpdateSubWardResponse")
    @Action(input = "http://service/EPollWebService/updateSubWardRequest", output = "http://service/EPollWebService/updateSubWardResponse")
    public boolean updateSubWard(
        @WebParam(name = "subward", targetNamespace = "")
        SubWardMaster subward,
        @WebParam(name = "newWardId", targetNamespace = "")
        Integer newWardId);

    /**
     * 
     * @param subwardId
     * @return
     *     returns service.SubWardMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getSubWard", targetNamespace = "http://service/", className = "service.GetSubWard")
    @ResponseWrapper(localName = "getSubWardResponse", targetNamespace = "http://service/", className = "service.GetSubWardResponse")
    @Action(input = "http://service/EPollWebService/getSubWardRequest", output = "http://service/EPollWebService/getSubWardResponse")
    public SubWardMaster getSubWard(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @param subwardId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteSubWard", targetNamespace = "http://service/", className = "service.DeleteSubWard")
    @ResponseWrapper(localName = "deleteSubWardResponse", targetNamespace = "http://service/", className = "service.DeleteSubWardResponse")
    @Action(input = "http://service/EPollWebService/deleteSubWardRequest", output = "http://service/EPollWebService/deleteSubWardResponse")
    public boolean deleteSubWard(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @return
     *     returns java.util.List<service.SubWardMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSubwards", targetNamespace = "http://service/", className = "service.GetAllSubwards")
    @ResponseWrapper(localName = "getAllSubwardsResponse", targetNamespace = "http://service/", className = "service.GetAllSubwardsResponse")
    @Action(input = "http://service/EPollWebService/getAllSubwardsRequest", output = "http://service/EPollWebService/getAllSubwardsResponse")
    public List<SubWardMaster> getAllSubwards();

    /**
     * 
     * @param subwardId
     * @return
     *     returns java.util.List<service.AreaMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAreaOfSubward", targetNamespace = "http://service/", className = "service.GetAreaOfSubward")
    @ResponseWrapper(localName = "getAreaOfSubwardResponse", targetNamespace = "http://service/", className = "service.GetAreaOfSubwardResponse")
    @Action(input = "http://service/EPollWebService/getAreaOfSubwardRequest", output = "http://service/EPollWebService/getAreaOfSubwardResponse")
    public List<AreaMaster> getAreaOfSubward(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @param subwardId
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidatesOfSubward", targetNamespace = "http://service/", className = "service.GetCandidatesOfSubward")
    @ResponseWrapper(localName = "getCandidatesOfSubwardResponse", targetNamespace = "http://service/", className = "service.GetCandidatesOfSubwardResponse")
    @Action(input = "http://service/EPollWebService/getCandidatesOfSubwardRequest", output = "http://service/EPollWebService/getCandidatesOfSubwardResponse")
    public List<CandidateMaster> getCandidatesOfSubward(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @param subwardId
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCitizensOfSubward", targetNamespace = "http://service/", className = "service.GetCitizensOfSubward")
    @ResponseWrapper(localName = "getCitizensOfSubwardResponse", targetNamespace = "http://service/", className = "service.GetCitizensOfSubwardResponse")
    @Action(input = "http://service/EPollWebService/getCitizensOfSubwardRequest", output = "http://service/EPollWebService/getCitizensOfSubwardResponse")
    public List<CitizenMaster> getCitizensOfSubward(
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @param area
     * @param subwardId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addArea", targetNamespace = "http://service/", className = "service.AddArea")
    @ResponseWrapper(localName = "addAreaResponse", targetNamespace = "http://service/", className = "service.AddAreaResponse")
    @Action(input = "http://service/EPollWebService/addAreaRequest", output = "http://service/EPollWebService/addAreaResponse")
    public boolean addArea(
        @WebParam(name = "area", targetNamespace = "")
        AreaMaster area,
        @WebParam(name = "subwardId", targetNamespace = "")
        Integer subwardId);

    /**
     * 
     * @param area
     * @param newSubwardId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateArea", targetNamespace = "http://service/", className = "service.UpdateArea")
    @ResponseWrapper(localName = "updateAreaResponse", targetNamespace = "http://service/", className = "service.UpdateAreaResponse")
    @Action(input = "http://service/EPollWebService/updateAreaRequest", output = "http://service/EPollWebService/updateAreaResponse")
    public boolean updateArea(
        @WebParam(name = "area", targetNamespace = "")
        AreaMaster area,
        @WebParam(name = "newSubwardId", targetNamespace = "")
        Integer newSubwardId);

    /**
     * 
     * @param areaId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteArea", targetNamespace = "http://service/", className = "service.DeleteArea")
    @ResponseWrapper(localName = "deleteAreaResponse", targetNamespace = "http://service/", className = "service.DeleteAreaResponse")
    @Action(input = "http://service/EPollWebService/deleteAreaRequest", output = "http://service/EPollWebService/deleteAreaResponse")
    public boolean deleteArea(
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @param areaId
     * @return
     *     returns service.AreaMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getArea", targetNamespace = "http://service/", className = "service.GetArea")
    @ResponseWrapper(localName = "getAreaResponse", targetNamespace = "http://service/", className = "service.GetAreaResponse")
    @Action(input = "http://service/EPollWebService/getAreaRequest", output = "http://service/EPollWebService/getAreaResponse")
    public AreaMaster getArea(
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @return
     *     returns java.util.List<service.AreaMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllAreas", targetNamespace = "http://service/", className = "service.GetAllAreas")
    @ResponseWrapper(localName = "getAllAreasResponse", targetNamespace = "http://service/", className = "service.GetAllAreasResponse")
    @Action(input = "http://service/EPollWebService/getAllAreasRequest", output = "http://service/EPollWebService/getAllAreasResponse")
    public List<AreaMaster> getAllAreas();

    /**
     * 
     * @param areaId
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCandidatesOfArea", targetNamespace = "http://service/", className = "service.GetCandidatesOfArea")
    @ResponseWrapper(localName = "getCandidatesOfAreaResponse", targetNamespace = "http://service/", className = "service.GetCandidatesOfAreaResponse")
    @Action(input = "http://service/EPollWebService/getCandidatesOfAreaRequest", output = "http://service/EPollWebService/getCandidatesOfAreaResponse")
    public List<CandidateMaster> getCandidatesOfArea(
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @param areaId
     * @return
     *     returns java.util.List<service.CitizenMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCitizensOfArea", targetNamespace = "http://service/", className = "service.GetCitizensOfArea")
    @ResponseWrapper(localName = "getCitizensOfAreaResponse", targetNamespace = "http://service/", className = "service.GetCitizensOfAreaResponse")
    @Action(input = "http://service/EPollWebService/getCitizensOfAreaRequest", output = "http://service/EPollWebService/getCitizensOfAreaResponse")
    public List<CitizenMaster> getCitizensOfArea(
        @WebParam(name = "areaId", targetNamespace = "")
        Integer areaId);

    /**
     * 
     * @param pm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addParty", targetNamespace = "http://service/", className = "service.AddParty")
    @ResponseWrapper(localName = "addPartyResponse", targetNamespace = "http://service/", className = "service.AddPartyResponse")
    @Action(input = "http://service/EPollWebService/addPartyRequest", output = "http://service/EPollWebService/addPartyResponse")
    public boolean addParty(
        @WebParam(name = "pm", targetNamespace = "")
        PartyMaster pm);

    /**
     * 
     * @param pm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkForExistingParty", targetNamespace = "http://service/", className = "service.CheckForExistingParty")
    @ResponseWrapper(localName = "checkForExistingPartyResponse", targetNamespace = "http://service/", className = "service.CheckForExistingPartyResponse")
    @Action(input = "http://service/EPollWebService/checkForExistingPartyRequest", output = "http://service/EPollWebService/checkForExistingPartyResponse")
    public boolean checkForExistingParty(
        @WebParam(name = "pm", targetNamespace = "")
        PartyMaster pm);

    /**
     * 
     * @param partyID
     * @return
     *     returns service.PartyMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getParty", targetNamespace = "http://service/", className = "service.GetParty")
    @ResponseWrapper(localName = "getPartyResponse", targetNamespace = "http://service/", className = "service.GetPartyResponse")
    @Action(input = "http://service/EPollWebService/getPartyRequest", output = "http://service/EPollWebService/getPartyResponse")
    public PartyMaster getParty(
        @WebParam(name = "partyID", targetNamespace = "")
        Integer partyID);

    /**
     * 
     * @param partyID
     * @return
     *     returns java.util.List<service.CandidateMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveCandidatesOfParty", targetNamespace = "http://service/", className = "service.GetActiveCandidatesOfParty")
    @ResponseWrapper(localName = "getActiveCandidatesOfPartyResponse", targetNamespace = "http://service/", className = "service.GetActiveCandidatesOfPartyResponse")
    @Action(input = "http://service/EPollWebService/getActiveCandidatesOfPartyRequest", output = "http://service/EPollWebService/getActiveCandidatesOfPartyResponse")
    public List<CandidateMaster> getActiveCandidatesOfParty(
        @WebParam(name = "partyID", targetNamespace = "")
        Integer partyID);

    /**
     * 
     * @param pm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateParty", targetNamespace = "http://service/", className = "service.UpdateParty")
    @ResponseWrapper(localName = "updatePartyResponse", targetNamespace = "http://service/", className = "service.UpdatePartyResponse")
    @Action(input = "http://service/EPollWebService/updatePartyRequest", output = "http://service/EPollWebService/updatePartyResponse")
    public boolean updateParty(
        @WebParam(name = "pm", targetNamespace = "")
        PartyMaster pm);

    /**
     * 
     * @param partyID
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteParty", targetNamespace = "http://service/", className = "service.DeleteParty")
    @ResponseWrapper(localName = "deletePartyResponse", targetNamespace = "http://service/", className = "service.DeletePartyResponse")
    @Action(input = "http://service/EPollWebService/deletePartyRequest", output = "http://service/EPollWebService/deletePartyResponse")
    public boolean deleteParty(
        @WebParam(name = "partyID", targetNamespace = "")
        Integer partyID);

    /**
     * 
     * @return
     *     returns java.util.List<service.PartyMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllParties", targetNamespace = "http://service/", className = "service.GetAllParties")
    @ResponseWrapper(localName = "getAllPartiesResponse", targetNamespace = "http://service/", className = "service.GetAllPartiesResponse")
    @Action(input = "http://service/EPollWebService/getAllPartiesRequest", output = "http://service/EPollWebService/getAllPartiesResponse")
    public List<PartyMaster> getAllParties();

    /**
     * 
     * @param cm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addCity", targetNamespace = "http://service/", className = "service.AddCity")
    @ResponseWrapper(localName = "addCityResponse", targetNamespace = "http://service/", className = "service.AddCityResponse")
    @Action(input = "http://service/EPollWebService/addCityRequest", output = "http://service/EPollWebService/addCityResponse")
    public boolean addCity(
        @WebParam(name = "cm", targetNamespace = "")
        CityMaster cm);

    /**
     * 
     * @return
     *     returns java.util.List<service.CityMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCities", targetNamespace = "http://service/", className = "service.GetAllCities")
    @ResponseWrapper(localName = "getAllCitiesResponse", targetNamespace = "http://service/", className = "service.GetAllCitiesResponse")
    @Action(input = "http://service/EPollWebService/getAllCitiesRequest", output = "http://service/EPollWebService/getAllCitiesResponse")
    public List<CityMaster> getAllCities();

    /**
     * 
     * @param cityMasterId
     * @return
     *     returns service.CityMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCity", targetNamespace = "http://service/", className = "service.GetCity")
    @ResponseWrapper(localName = "getCityResponse", targetNamespace = "http://service/", className = "service.GetCityResponse")
    @Action(input = "http://service/EPollWebService/getCityRequest", output = "http://service/EPollWebService/getCityResponse")
    public CityMaster getCity(
        @WebParam(name = "cityMasterId", targetNamespace = "")
        Integer cityMasterId);

    /**
     * 
     * @param cityId
     * @return
     *     returns java.util.List<service.ZoneMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getZonesOfCity", targetNamespace = "http://service/", className = "service.GetZonesOfCity")
    @ResponseWrapper(localName = "getZonesOfCityResponse", targetNamespace = "http://service/", className = "service.GetZonesOfCityResponse")
    @Action(input = "http://service/EPollWebService/getZonesOfCityRequest", output = "http://service/EPollWebService/getZonesOfCityResponse")
    public List<ZoneMaster> getZonesOfCity(
        @WebParam(name = "cityId", targetNamespace = "")
        Integer cityId);

    /**
     * 
     * @param electionTypeId
     * @param elm
     * @param candidateIds
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addElection", targetNamespace = "http://service/", className = "service.AddElection")
    @ResponseWrapper(localName = "addElectionResponse", targetNamespace = "http://service/", className = "service.AddElectionResponse")
    @Action(input = "http://service/EPollWebService/addElectionRequest", output = "http://service/EPollWebService/addElectionResponse")
    public boolean addElection(
        @WebParam(name = "elm", targetNamespace = "")
        ElectionMaster elm,
        @WebParam(name = "electionTypeId", targetNamespace = "")
        Integer electionTypeId,
        @WebParam(name = "candidateIds", targetNamespace = "")
        List<Integer> candidateIds);

    /**
     * 
     * @param electionID
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "scheduleElection", targetNamespace = "http://service/", className = "service.ScheduleElection")
    @ResponseWrapper(localName = "scheduleElectionResponse", targetNamespace = "http://service/", className = "service.ScheduleElectionResponse")
    @Action(input = "http://service/EPollWebService/scheduleElectionRequest", output = "http://service/EPollWebService/scheduleElectionResponse")
    public boolean scheduleElection(
        @WebParam(name = "electionID", targetNamespace = "")
        Integer electionID);

    /**
     * 
     * @param electionID
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "cancelElection", targetNamespace = "http://service/", className = "service.CancelElection")
    @ResponseWrapper(localName = "cancelElectionResponse", targetNamespace = "http://service/", className = "service.CancelElectionResponse")
    @Action(input = "http://service/EPollWebService/cancelElectionRequest", output = "http://service/EPollWebService/cancelElectionResponse")
    public boolean cancelElection(
        @WebParam(name = "electionID", targetNamespace = "")
        Integer electionID);

    /**
     * 
     * @param electionTypeId
     * @param elm
     * @param candidateIds
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateElection", targetNamespace = "http://service/", className = "service.UpdateElection")
    @ResponseWrapper(localName = "updateElectionResponse", targetNamespace = "http://service/", className = "service.UpdateElectionResponse")
    @Action(input = "http://service/EPollWebService/updateElectionRequest", output = "http://service/EPollWebService/updateElectionResponse")
    public boolean updateElection(
        @WebParam(name = "elm", targetNamespace = "")
        ElectionMaster elm,
        @WebParam(name = "electionTypeId", targetNamespace = "")
        Integer electionTypeId,
        @WebParam(name = "candidateIds", targetNamespace = "")
        List<Integer> candidateIds);

    /**
     * 
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getFutureElections", targetNamespace = "http://service/", className = "service.GetFutureElections")
    @ResponseWrapper(localName = "getFutureElectionsResponse", targetNamespace = "http://service/", className = "service.GetFutureElectionsResponse")
    @Action(input = "http://service/EPollWebService/getFutureElectionsRequest", output = "http://service/EPollWebService/getFutureElectionsResponse")
    public List<ElectionMaster> getFutureElections();

    /**
     * 
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getScheduledElections", targetNamespace = "http://service/", className = "service.GetScheduledElections")
    @ResponseWrapper(localName = "getScheduledElectionsResponse", targetNamespace = "http://service/", className = "service.GetScheduledElectionsResponse")
    @Action(input = "http://service/EPollWebService/getScheduledElectionsRequest", output = "http://service/EPollWebService/getScheduledElectionsResponse")
    public List<ElectionMaster> getScheduledElections();

    /**
     * 
     * @param electionId
     * @return
     *     returns service.ElectionMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getElection", targetNamespace = "http://service/", className = "service.GetElection")
    @ResponseWrapper(localName = "getElectionResponse", targetNamespace = "http://service/", className = "service.GetElectionResponse")
    @Action(input = "http://service/EPollWebService/getElectionRequest", output = "http://service/EPollWebService/getElectionResponse")
    public ElectionMaster getElection(
        @WebParam(name = "electionId", targetNamespace = "")
        Integer electionId);

    /**
     * 
     * @return
     *     returns java.util.List<service.ElectionTypeMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllElectionTypes", targetNamespace = "http://service/", className = "service.GetAllElectionTypes")
    @ResponseWrapper(localName = "getAllElectionTypesResponse", targetNamespace = "http://service/", className = "service.GetAllElectionTypesResponse")
    @Action(input = "http://service/EPollWebService/getAllElectionTypesRequest", output = "http://service/EPollWebService/getAllElectionTypesResponse")
    public List<ElectionTypeMaster> getAllElectionTypes();

    /**
     * 
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPastElections", targetNamespace = "http://service/", className = "service.GetPastElections")
    @ResponseWrapper(localName = "getPastElectionsResponse", targetNamespace = "http://service/", className = "service.GetPastElectionsResponse")
    @Action(input = "http://service/EPollWebService/getPastElectionsRequest", output = "http://service/EPollWebService/getPastElectionsResponse")
    public List<ElectionMaster> getPastElections();

    /**
     * 
     * @return
     *     returns java.util.List<service.ElectionMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllElections", targetNamespace = "http://service/", className = "service.GetAllElections")
    @ResponseWrapper(localName = "getAllElectionsResponse", targetNamespace = "http://service/", className = "service.GetAllElectionsResponse")
    @Action(input = "http://service/EPollWebService/getAllElectionsRequest", output = "http://service/EPollWebService/getAllElectionsResponse")
    public List<ElectionMaster> getAllElections();

    /**
     * 
     * @param candidateIds
     * @param citizenId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "castVote", targetNamespace = "http://service/", className = "service.CastVote")
    @ResponseWrapper(localName = "castVoteResponse", targetNamespace = "http://service/", className = "service.CastVoteResponse")
    @Action(input = "http://service/EPollWebService/castVoteRequest", output = "http://service/EPollWebService/castVoteResponse")
    public boolean castVote(
        @WebParam(name = "citizenId", targetNamespace = "")
        Integer citizenId,
        @WebParam(name = "candidateIds", targetNamespace = "")
        List<Integer> candidateIds);

    /**
     * 
     * @param citizenId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "isValidToVote", targetNamespace = "http://service/", className = "service.IsValidToVote")
    @ResponseWrapper(localName = "isValidToVoteResponse", targetNamespace = "http://service/", className = "service.IsValidToVoteResponse")
    @Action(input = "http://service/EPollWebService/isValidToVoteRequest", output = "http://service/EPollWebService/isValidToVoteResponse")
    public boolean isValidToVote(
        @WebParam(name = "citizenId", targetNamespace = "")
        Integer citizenId);

    /**
     * 
     * @param wardId
     * @return
     *     returns service.XmlHashMapII
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveCandidatesWithPartyId", targetNamespace = "http://service/", className = "service.GetActiveCandidatesWithPartyId")
    @ResponseWrapper(localName = "getActiveCandidatesWithPartyIdResponse", targetNamespace = "http://service/", className = "service.GetActiveCandidatesWithPartyIdResponse")
    @Action(input = "http://service/EPollWebService/getActiveCandidatesWithPartyIdRequest", output = "http://service/EPollWebService/getActiveCandidatesWithPartyIdResponse")
    public XmlHashMapII getActiveCandidatesWithPartyId(
        @WebParam(name = "wardId", targetNamespace = "")
        Integer wardId);

    /**
     * 
     * @param message
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://service/", className = "service.SayHello")
    @Action(input = "http://service/EPollWebService/sayHello")
    public void sayHello(
        @WebParam(name = "message", targetNamespace = "")
        String message);

    /**
     * 
     * @param sm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addSecurity", targetNamespace = "http://service/", className = "service.AddSecurity")
    @ResponseWrapper(localName = "addSecurityResponse", targetNamespace = "http://service/", className = "service.AddSecurityResponse")
    @Action(input = "http://service/EPollWebService/addSecurityRequest", output = "http://service/EPollWebService/addSecurityResponse")
    public boolean addSecurity(
        @WebParam(name = "sm", targetNamespace = "")
        SecurityMaster sm);

    /**
     * 
     * @param securityId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "activateSecurity", targetNamespace = "http://service/", className = "service.ActivateSecurity")
    @ResponseWrapper(localName = "activateSecurityResponse", targetNamespace = "http://service/", className = "service.ActivateSecurityResponse")
    @Action(input = "http://service/EPollWebService/activateSecurityRequest", output = "http://service/EPollWebService/activateSecurityResponse")
    public boolean activateSecurity(
        @WebParam(name = "securityId", targetNamespace = "")
        Integer securityId);

    /**
     * 
     * @param securityId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deactivateSecurity", targetNamespace = "http://service/", className = "service.DeactivateSecurity")
    @ResponseWrapper(localName = "deactivateSecurityResponse", targetNamespace = "http://service/", className = "service.DeactivateSecurityResponse")
    @Action(input = "http://service/EPollWebService/deactivateSecurityRequest", output = "http://service/EPollWebService/deactivateSecurityResponse")
    public boolean deactivateSecurity(
        @WebParam(name = "securityId", targetNamespace = "")
        Integer securityId);

    /**
     * 
     * @param gm
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addGroup", targetNamespace = "http://service/", className = "service.AddGroup")
    @ResponseWrapper(localName = "addGroupResponse", targetNamespace = "http://service/", className = "service.AddGroupResponse")
    @Action(input = "http://service/EPollWebService/addGroupRequest", output = "http://service/EPollWebService/addGroupResponse")
    public boolean addGroup(
        @WebParam(name = "gm", targetNamespace = "")
        GroupMaster gm);

    /**
     * 
     * @return
     *     returns service.SecurityMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveSecurity", targetNamespace = "http://service/", className = "service.GetActiveSecurity")
    @ResponseWrapper(localName = "getActiveSecurityResponse", targetNamespace = "http://service/", className = "service.GetActiveSecurityResponse")
    @Action(input = "http://service/EPollWebService/getActiveSecurityRequest", output = "http://service/EPollWebService/getActiveSecurityResponse")
    public SecurityMaster getActiveSecurity();

    /**
     * 
     * @return
     *     returns java.util.List<service.SecurityMaster>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllSecurity", targetNamespace = "http://service/", className = "service.GetAllSecurity")
    @ResponseWrapper(localName = "getAllSecurityResponse", targetNamespace = "http://service/", className = "service.GetAllSecurityResponse")
    @Action(input = "http://service/EPollWebService/getAllSecurityRequest", output = "http://service/EPollWebService/getAllSecurityResponse")
    public List<SecurityMaster> getAllSecurity();

    /**
     * 
     * @param username
     * @return
     *     returns service.LoginMaster
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getLoginMasterFromUsername", targetNamespace = "http://service/", className = "service.GetLoginMasterFromUsername")
    @ResponseWrapper(localName = "getLoginMasterFromUsernameResponse", targetNamespace = "http://service/", className = "service.GetLoginMasterFromUsernameResponse")
    @Action(input = "http://service/EPollWebService/getLoginMasterFromUsernameRequest", output = "http://service/EPollWebService/getLoginMasterFromUsernameResponse")
    public LoginMaster getLoginMasterFromUsername(
        @WebParam(name = "username", targetNamespace = "")
        String username);

}
